/*
 * max7219.c
 *
 *  Created on: 2019. 3. 22.
 *      Author: KIKI
 */


#include "MAX7219.h"

SPI_HandleTypeDef* Max7219_SPI;
GPIO_TypeDef* Max7219_SS_Port;
uint16_t Max7219_SS_Pin;

static void SS_Select();
static void SS_Deselect();
static bool SPI_Tx(uint8_t data);
static bool SPI_TxBuffer(uint8_t *buffer, uint8_t len);

void MAX7219_Init(SPI_HandleTypeDef* spi, GPIO_TypeDef* ss_port, uint16_t ss_pin)
{
	Max7219_SPI = spi;
	Max7219_SS_Port = cs_port;
	Max7219_SS_Pin = cs_pin;

	/* Deselect SS */
	SS_Deselect();
}

bool MAX7219_Write(uint8_t index, uint8_t reg, uint8_t data)
{
	if(index >= MAX7219_IC_NUM) return;

	SS_Select();

	/* NOOP to following ic */
	for(int i = index; i < MAX7219_IC_NUM-1; i++)
	{
		SPI_Tx(MAX7219_REG_NOOP) return false;
		SPI_Tx(MAX7219_REG_NOOP) return false;
	}

	/* Write register */
	SPI_Tx(reg) return false;
	SPI_Tx(data) return false;

	/* NOOP to previous ic */
	for(int i = 0; i < index; i++)
	{
		SPI_Tx(MAX7219_REG_NOOP);
		SPI_Tx(MAX7219_REG_NOOP);
	}

	SS_Deselect();
}

bool MAX7219_Digit(uint8_t index, uint8_t digit, int8_t value)
{
	if(index >= MAX7219_IC_NUM) return;
	if(digit > 0x07) return;

	MAX7219_Write(index, digit+1, value);
}

bool MAX7219_Decode(uint8_t index, uint8_t value)
{
	if(index >= MAX7219_IC_NUM) return;

	MAX7219_Write(index, MAX7219_REG_DECODE, value);
}

bool MAX7219_Intensity(uint8_t index, uint8_t value)
{
	if(index >= MAX7219_IC_NUM) return;
	if(value > 0x0F) value = 0x0F;

	MAX7219_Write(index, MAX7219_REG_INTENSITY, value);
}

bool MAX7219_ScanLimit(uint8_t index, uint8_t value)
{
	if(index >= MAX7219_IC_NUM) return;
	if(value > 0x07) value = 0x07;

	MAX7219_Write(index, MAX7219_REG_SCANLIMIT, value);
}

bool MAX7219_ShutDown(uint8_t index, uint8_t value)
{
	if(index >= MAX7219_IC_NUM) return;
	if(value > 0x01) value = 0x01;

	MAX7219_Write(index, MAX7219_REG_SHUTDOWN, value);
}

bool MAX7219_Test(uint8_t index, uint8_t value)
{
	if(index >= MAX7219_IC_NUM) return;
	if(value > 0x01) value = 0x01;

	MAX7219_Write(index, MAX7219_REG_TEST, value);
}

static void SS_Select()
{
	HAL_GPIO_WritePin(Max7219_SS_Port, Max7219_SS_Pin, GPIO_PIN_RESET);
	HAL_Delay(1);
}

static void SS_Deselect()
{
	HAL_GPIO_WritePin(Max7219_SS_Port, Max7219_SS_Pin, GPIO_PIN_SET);
	HAL_Delay(1);
}

static bool SPI_Tx(uint8_t data)
{
	if(HAL_SPI_Transmit(Max7219_SPI, &data, 1, HAL_MAX_DELAY) != HAL_OK) return false;
	return true;
}

static bool SPI_TxBuffer(uint8_t *buffer, uint8_t len)
{
	if(HAL_SPI_Transmit(Max7219_SPI, buffer, len, HAL_MAX_DELAY) != HAL_OK) return false;
	return true;
}
