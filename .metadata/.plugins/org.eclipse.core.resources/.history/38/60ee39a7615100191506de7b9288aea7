
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  ** This notice applies to any and all portions of this file
  * that are not between comment pairs USER CODE BEGIN and
  * USER CODE END. Other portions of this file, whether 
  * inserted by the user or by software development tools
  * are owned by their respective copyright owners.
  *
  * COPYRIGHT(c) 2019 STMicroelectronics
  *
  * Redistribution and use in source and binary forms, with or without modification,
  * are permitted provided that the following conditions are met:
  *   1. Redistributions of source code must retain the above copyright notice,
  *      this list of conditions and the following disclaimer.
  *   2. Redistributions in binary form must reproduce the above copyright notice,
  *      this list of conditions and the following disclaimer in the documentation
  *      and/or other materials provided with the distribution.
  *   3. Neither the name of STMicroelectronics nor the names of its contributors
  *      may be used to endorse or promote products derived from this software
  *      without specific prior written permission.
  *
  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  *
  ******************************************************************************
  */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "stm32f4xx_hal.h"

/* USER CODE BEGIN Includes */
#include "max7219.h"
#include "max7219_matrix.h"

/* USER CODE END Includes */

/* Private variables ---------------------------------------------------------*/
SPI_HandleTypeDef hspi2;

/* USER CODE BEGIN PV */
/* Private variables ---------------------------------------------------------*/

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_SPI2_Init(void);

/* USER CODE BEGIN PFP */
/* Private function prototypes -----------------------------------------------*/

/* USER CODE END PFP */

/* USER CODE BEGIN 0 */
const uint64_t symbol[] = {
		0x1800183860663c00,
		0x10387cfefeee4400,
		0x060e0c0808281800,
		0x10307efe7e301000,
		0x1018fcfefc181000
};

const uint64_t numbers[] = {
		/* 8     =>      1   row */
		0x3c66666e76663c00, /* 0 */
		0x7e1818181c181800,	/* 1 */
		0x7e060c3060663c00,	/* 2 */
		0x3c66603860663c00,	/* 3 */
		0x30307e3234383000, /* 4 */
		0x3c6660603e067e00, /* 5 */
		0x3c66663e06663c00, /* 6 */
		0x1818183030667e00, /* 7 */
		0x3c66663c66663c00, /* 8 */
		0x3c66607c66663c00, /* 9 */
};

const uint64_t Atoz[] = {
		0x6666667e66663c00, /* A */
		0x3e66663e66663e00,	/* B */
		0x3c66060606663c00,
		0x3e66666666663e00,
		0x7e06063e06067e00,
		0x0606063e06067e00,
		0x3c66760606663c00,
		0x6666667e66666600,
		0x3c18181818183c00,
		0x1c36363030307800,
		0x66361e0e1e366600,
		0x7e06060606060600,
		0xc6c6c6d6feeec600,
		0xc6c6e6f6decec600,
		0x3c66666666663c00,
		0x06063e6666663e00,
		0x603c766666663c00,
		0x66361e3e66663e00,
		0x3c66603c06663c00,
		0x18181818185a7e00,
		0x7c66666666666600,
		0x183c666666666600,
		0xc6eefed6c6c6c600,
		0xc6c66c386cc6c600,
		0x1818183c66666600,
		0x7e060c1830607e00,
		0x0000000000000000,
		0x7c667c603c000000,
		0x3e66663e06060600,
		0x3c6606663c000000,
		0x7c66667c60606000,
		0x3c067e663c000000,
		0x0c0c3e0c0c6c3800,
		0x3c607c66667c0000,
		0x6666663e06060600,
		0x3c18181800180000,
		0x1c36363030003000,
		0x66361e3666060600,
		0x1818181818181800,
		0xd6d6feeec6000000,
		0x6666667e3e000000,
		0x3c6666663c000000,
		0x06063e66663e0000,
		0xf0b03c36363c0000,
		0x060666663e000000,
		0x3e403c027c000000,
		0x1818187e18180000,
		0x7c66666666000000,
		0x183c666600000000,
		0x7cd6d6d6c6000000,
		0x663c183c66000000,
		0x3c607c6666000000, /* y */
		0x3c0c18303c000000  /* z */
};

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  *
  * @retval None
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_SPI2_Init();
  /* USER CODE BEGIN 2 */
  MAX7219_MatrixInit(&hspi2, SPI2_CS_GPIO_Port, SPI2_CS_Pin);
  MAX7219_MatrixUpdate();

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

  /* USER CODE END WHILE */

  /* USER CODE BEGIN 3 */

	  /* TIME */
	  MAX7219_MatrixSetRow64(0, Atoz['B'- 65]);
	  MAX7219_MatrixSetRow64(1, Atoz['O'- 65]);
	  MAX7219_MatrixSetRow64(2, Atoz['M' - 65]);
	  MAX7219_MatrixSetRow64(3, Atoz['B' - 65]);
	  MAX7219_MatrixUpdate();
	  HAL_Delay(3000);

	  for(int i = 1000; i >= 0; i--)
	  {
		  int temp = (i / 1000) % 10;
		  MAX7219_MatrixSetRow64(0, numbers[temp]);
		  temp = (i / 100) % 10;
		  MAX7219_MatrixSetRow64(1, numbers[temp]);
		  temp = (i / 10) % 10;
		  MAX7219_MatrixSetRow64(2, numbers[temp]);
		  temp = i % 10;
		  MAX7219_MatrixSetRow64(3, numbers[temp]);
		  MAX7219_MatrixUpdate();
		  HAL_Delay(10);
	  }

	  MAX7219_MatrixSetRow64(0, Atoz['B'- 65]);
	  MAX7219_MatrixSetRow64(1, Atoz['A'- 65]);
	  MAX7219_MatrixSetRow64(2, Atoz['N' - 65]);
	  MAX7219_MatrixSetRow64(3, Atoz['G' - 65]);
	  MAX7219_MatrixUpdate();
	  HAL_Delay(3000);

	  for(int i = 0; i < 24; i++)
	  {
		  MAX7219_MatrixLShift(1);
		  MAX7219_MatrixUpdate();
		  HAL_Delay(100);
	  }

	  for(int i = 0; i < 24; i++)
	  {
		  MAX7219_MatrixRShift(1);
		  MAX7219_MatrixUpdate();
		  HAL_Delay(100);
	  }
	  HAL_Delay(3000);
  }
  /* USER CODE END 3 */

}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{

  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
}

/* SPI2 init function */
static void MX_SPI2_Init(void)
{

  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
  hspi2.Init.Mode = SPI_MODE_MASTER;
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi2.Init.NSS = SPI_NSS_SOFT;
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi2.Init.CRCPolynomial = 10;
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

}

/** Configure pins as 
        * Analog 
        * Input 
        * Output
        * EVENT_OUT
        * EXTI
*/
static void MX_GPIO_Init(void)
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);

}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t* file, uint32_t line)
{ 
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

/**
  * @}
  */

/**
  * @}
  */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
