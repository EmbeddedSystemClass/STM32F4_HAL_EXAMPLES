#include "MP3_Player.h"

const uint8_t  BYTES_2_WRITE = 32;
const uint16_t BUFFER_SIZE = 512;

uint8_t mp3FileName[512] = {'s','o','u','n','d','.','m','p','3',0};
uint8_t mp3Buffer[BUFFER_SIZE];

uint32_t fileSize;
uint16_t cnt = 0;

void MP3_SetVolume(uint8_t volumeLeft, uint8_t volumeRight)
{
    uint16_t volume;
    volume = ( volumeLeft << 8 ) + volumeRight;
    VS1053_CmdWrite(_VS1053_VOL_ADDR, volume);
}

void MP3_Init(const char *filename)
{
    VS1053_Init();
    VS105_Reset();

    // MP3 configuration
    VS1053_CmdWrite(_VS1053_MODE_ADDR, 0x0800);
    VS1053_CmdWrite(_VS1053_BASS_ADDR, 0x7A00);
    VS1053_CmdWrite(_VS1053_CLOCKF_ADDR, 0x2000);

    // MP3 set volume, maximum volume is 0x00 and total silence is 0xFE.
    MP3_SetVolume( 0x2F, 0x2F );

    // File Open
}

void MP3_Play()
{
	// Get fileSize
    Mmc_Fat_Reset(&fileSize);

    while (fileSize > BUFFER_SIZE)
    {
        for (cnt = 0; cnt < BUFFER_SIZE; cnt++)
        {
        	//Fill buffer
            Mmc_Fat_Read(mp3Buffer + cnt);
        }

        /* 512 / 32 = 16 */
        for (cnt = 0; cnt < BUFFER_SIZE / BYTES_2_WRITE; cnt++)
        {
        	//Tx buffer
            while( mp3_dataWrite32( mp3_buffer + cnt * BYTES_2_WRITE ));
        }

        /* Left bytes to send */
        fileSize -= BUFFER_SIZE;
    }

    /* If left bytes are smaller than buffer */
    for (cnt = 0; cnt < fileSize; cnt++)
    {
    	//Fill buffer
        Mmc_Fat_Read(mp3_buffer + cnt);
    }

    for (cnt = 0; cnt < fileSize; cnt++)
    {
    	//Tx buffer
        while( mp3_dataWrite(mp3_buffer + cnt));
    }

    /* Delay 100ms */
    Delay_100ms();
}
